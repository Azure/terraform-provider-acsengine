// Code generated by go-bindata.
// sources:
// ../../translations/en_US/LC_MESSAGES/acsengine.mo
// ../../translations/en_US/LC_MESSAGES/acsengine.po
// ../../translations/en_US/LC_MESSAGES/acsengine.po.lcg
// DO NOT EDIT!

package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _translationsEn_usLc_messagesAcsengineMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x4f\x8b\x5c\x45\x17\xc6\x9f\x99\xe9\xc9\x4c\xdf\xf7\xf5\x5f\xd4\x85\xa8\x78\x82\xb4\x49\x8c\xb7\xbd\xdd\x89\x4e\xec\x38\xc1\x38\xce\xc8\x68\x86\x0c\x63\x27\xb8\x0b\xd5\xf7\x9e\xe9\xae\xe4\x76\xd5\x4d\x55\xdd\xce\x74\x44\x57\x7e\x05\x97\x82\x2b\xc1\x4f\x21\x88\x08\x7e\x09\x51\x50\x70\x21\xb8\x16\x5c\x48\xdd\xba\x9d\x6e\x42\x04\x71\xe3\x66\x6a\x53\xdd\x75\x9f\x73\xce\xaf\x9e\x73\xa8\x1f\x4e\x36\x3e\x03\x80\xa7\x01\x3c\x07\xe0\x5b\x00\xcf\x03\xc8\x97\x50\xad\x1f\x97\x00\x02\xf0\xd3\x12\x70\x0e\xc0\xf2\x32\xb0\x03\xa0\xbd\x0c\xec\x02\x28\x97\x81\x37\x00\x7c\xbd\x0c\x6c\x02\xf8\x63\x19\xd8\x02\xb0\xb1\x02\x9c\x02\xf0\xd1\x0a\x70\x06\xc0\xe7\x2b\x40\x0b\xc0\x77\x2b\xc0\x33\x00\x7e\xab\xf7\x13\x0d\xa0\x0d\x80\x1a\xc0\xcb\x00\xae\x35\x42\x9d\x7b\x0d\xe0\x32\x80\x2f\x1b\xa1\xfe\x2f\x0d\xe0\x05\xaf\x5f\x0d\x9c\x2f\xad\x02\xcf\x02\xd8\x5a\x05\x3e\x5d\x02\x6e\xae\x06\xdd\xcf\x27\x42\xfc\xea\x5a\xe0\xec\xac\x05\xce\xa3\xb5\xc0\xf9\xcd\x5a\xe0\xfc\x73\x2d\x70\xf6\xd6\x03\xe7\x27\xeb\x81\xf3\x8b\xf5\xc0\xf9\xfd\x7a\xe0\xfb\xbd\xde\x9b\xcd\xc0\xf9\x62\x33\x70\x1e\x34\x43\x9d\x8f\x9b\x81\xf3\xab\x66\xa8\xff\x6b\x33\x70\x36\xa3\xc0\x79\x36\x0a\x9c\x3b\x11\xe0\x2d\xfd\xbf\xf7\x10\x40\xc3\xdf\x05\xc0\x9a\xd7\x02\x78\x0c\xc0\x49\xcc\x57\x54\xef\x4f\x01\x78\x02\xc0\x3a\x80\x27\x01\x3c\xea\xef\x06\xe0\x71\x00\x2b\x75\xdf\xfc\xfa\x1f\x80\x47\xf0\x90\xb5\x6d\x8c\x36\x64\x58\x64\x52\x0d\xe9\x50\xe6\x4c\x2d\xfb\x0a\x55\xc7\x3d\x6a\xd9\x5a\x70\x77\xe4\xbf\xdc\x29\xd9\x4c\xbd\xee\xca\xc1\x1e\x1d\x56\x71\x56\x97\x26\x65\xdb\xa3\xd6\xb9\x09\x76\x74\xa9\x32\xea\xce\x8f\xe9\xae\x74\x23\x72\xd3\xc2\x67\x25\xa9\xc8\x8d\x98\x1c\x8f\x8b\x5c\x38\x6e\x53\x7f\xc4\x86\xc9\x8e\x74\x99\x67\xa4\x55\x3e\xa5\x01\x53\xa7\x4e\xa3\xf4\xbf\xcb\x33\x12\x13\xa6\x01\xb3\xa2\x0e\xfa\xda\x89\x9c\x52\x5d\x2a\x47\xfa\x90\xc6\xc2\x3a\x36\x74\x63\xcf\xf3\x66\xc4\x47\x29\x73\xc6\xfe\x47\xc1\xa9\xe3\x2c\x28\xfd\x37\x5c\x2f\x86\x46\x64\x4c\x4e\xd3\xfb\xe5\x80\x8d\x62\xc7\x96\x3a\xed\xd7\xdb\x5d\x92\x96\x94\x76\x64\xcb\xa2\xd0\xc6\x87\x1d\x1a\x3d\xa6\x09\x1b\x2b\xb5\xaa\x4c\x7b\x78\xf4\x82\xe2\x1f\xe4\xe0\xca\xf8\xd4\xb0\x70\xde\xf2\x4c\x1a\x4e\x9d\x36\x53\x3a\xdd\xb2\xa7\x17\x14\x7c\xc4\x69\x59\x49\x66\x86\x54\xad\xa9\x5b\xd9\xa3\xd6\xa4\x16\x0e\x59\xb1\x09\xc9\xca\x19\x5f\x1d\xb1\x90\xae\x10\xc6\x2e\x8c\xc2\x42\xfc\x03\x43\x52\xc5\x1c\x0a\x99\x73\xe6\xef\x59\x81\x32\xe9\x82\x95\xb5\x23\x2a\xca\x41\x2e\x53\xba\xcd\x53\xb2\xce\x48\x35\xec\x51\xeb\xce\x82\xbc\x86\x61\x2a\x8c\x9c\xf8\xdd\x2b\x3d\xb7\xb5\xa3\x07\xa4\x52\x49\x27\x45\x2e\xef\xcd\x79\x67\xe1\xf5\x8c\x4a\x35\x11\xb9\xcc\x66\xf6\x79\x7f\x7d\xaa\x54\xab\xd9\xc9\x40\xa4\xb7\x83\xc5\xe5\xec\x8c\x33\xd2\x83\x5b\x9c\x3a\x68\x93\x8e\xd8\xba\x2a\x5f\xe5\xae\xef\x4e\xa9\xee\xf7\x06\x73\x63\xc3\xd5\x29\xd3\x1c\xfa\xc7\x47\xd2\x3a\x94\xca\x70\xaa\x87\x4a\xde\xe3\x8c\xae\xec\xef\xde\xa8\xab\xfa\x5c\x98\x8a\x71\xfe\x77\x81\xfb\x46\x7b\x82\x78\x37\x8b\x6f\xcc\x5a\x2f\x52\xcb\x6a\x28\x15\x47\x07\xec\xeb\xc7\x7b\x76\x28\xb3\xf8\xed\x72\x68\xe3\xbe\xee\x51\xb4\x7f\xad\x1f\x6f\x55\x63\xa1\x55\xfc\x4e\xd5\xbd\x6e\xd2\xd9\x88\x93\x8d\xb8\xfb\x1a\x25\x49\x2f\xb9\x70\x2e\x49\x92\x24\xda\xbf\x16\x1f\xf0\x44\xda\x87\xe8\x2e\x50\x67\xa3\xd7\x3d\x1f\x27\x1b\x49\x12\x5d\x15\xd6\xc5\x7d\x23\x94\xcd\x83\xa5\xef\x49\xa1\x86\x4e\x0a\x45\x57\x25\xbd\x79\x6b\xf6\x2f\x97\x6f\x8d\xb4\x1b\x0b\x99\xb7\x53\x3d\xbe\x1c\x5d\x15\x6a\x58\x8a\x21\xc7\x7d\x16\xe3\x1e\x6d\xab\x61\x2e\xed\xe8\xfe\x71\x8f\x58\xdd\xbc\xfe\x41\xb4\xb7\xbb\xb7\x3d\xbf\x5e\xa7\x9d\x44\x5b\x5a\x39\x56\x2e\xee\x4f\x0b\xee\x91\xe3\x23\xf7\x6a\x91\x0b\xa9\x2e\x51\x3a\x12\xc6\xb2\xdb\xbc\xde\xdf\x89\x2f\xce\x75\x9e\xed\x90\x4d\xbc\xad\x52\x9d\x55\xc3\x74\x71\x20\x5d\xb4\x9f\x97\x46\xe4\xf1\x8e\x36\x63\xdb\x23\x55\x54\x7f\xed\x66\xf7\x12\x85\x9f\x9b\x67\x14\x9d\xda\xa4\xce\xd9\x4b\xd1\x87\xf1\xbb\xf3\x91\xd9\xd7\x9c\x49\x47\xdd\x76\xd2\x3e\x1f\x1d\x3f\x81\xc7\x4f\xe0\xf1\x13\xf8\x9f\x3d\x81\x7f\x05\x00\x00\xff\xff\x15\x09\xe4\xac\x62\x0a\x00\x00")

func translationsEn_usLc_messagesAcsengineMoBytes() ([]byte, error) {
	return bindataRead(
		_translationsEn_usLc_messagesAcsengineMo,
		"translations/en_US/LC_MESSAGES/acsengine.mo",
	)
}

func translationsEn_usLc_messagesAcsengineMo() (*asset, error) {
	bytes, err := translationsEn_usLc_messagesAcsengineMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translations/en_US/LC_MESSAGES/acsengine.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translationsEn_usLc_messagesAcsenginePo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x53\xe3\x36\x10\x7e\xcf\xaf\xd8\x86\x61\xee\x6e\x0e\x07\xdb\x81\x4b\x30\xa5\x53\x4a\xa1\x43\x0b\x3d\x86\x0b\x4c\x1f\x3a\xd3\x51\xec\x8d\xad\x43\x59\xb9\x92\x1c\xc8\xfd\xfa\x8e\xe4\x84\x04\x4e\x0e\x09\xe5\x21\x13\xc7\xfa\xb4\xfb\xed\x6a\xf7\x5b\x65\x0b\x4e\x29\x17\x5c\x17\x60\x14\x23\x2d\x98\xe1\x92\x34\x8c\xa4\x02\x96\xea\x00\x29\xe7\x84\x50\xb2\xf4\x8e\xe5\xd8\x69\x6d\xc1\x89\x2c\xa7\x8a\xe7\x85\x81\xf7\x27\x1f\x20\x0e\xa3\x5e\x6b\x0b\x06\x05\xd7\x30\xe2\x02\x81\x6b\xc8\xb8\x36\x8a\x0f\x2b\x83\x19\x54\x94\xa1\x02\x53\x20\x68\x36\x46\x10\x3c\x45\xd2\x08\x4c\xbb\x77\x7e\x0f\xbf\x73\x46\xb9\xe1\x8c\xe0\x82\xc3\x8f\x5f\xe7\xbf\x04\xff\xb9\x90\x66\xcc\xb8\xe8\xa4\x72\xfc\xd3\x8e\xf3\xdd\x69\x6d\xb5\xc6\x3a\xe7\x19\xb4\xdb\xf6\x41\x1b\x65\x9f\xda\x57\x4a\x7e\xc5\xd4\x04\xe7\x59\x70\x8b\x4a\x73\x49\x89\xf5\x56\x3b\xfb\x9b\xda\xad\xf6\x35\x96\x52\x99\xe0\xd2\x6e\x0e\x7e\xa9\x72\x1d\x0c\x64\x02\x6e\xe9\xea\xf3\x20\x38\x51\xe8\x52\x11\xfc\xca\x0c\x26\xce\x57\x10\xf6\x82\x78\x1f\xc2\x30\x09\xf7\x3e\x86\x61\x18\xce\xc0\xc1\x35\x4e\xb8\xf6\x60\xf7\x20\xea\x25\x71\x37\x08\x7b\x33\xec\x05\xd3\x26\x18\xcc\xf2\x2c\x55\xb2\x66\xa8\xb3\xbd\x94\x57\x2c\xc7\x60\x80\x6c\x9c\xcc\x4f\xed\xc9\x52\x02\x48\xff\xdc\x7c\x71\xef\x2e\xcf\x2f\x4f\x17\xa1\x47\x9d\x9a\xc0\x89\x24\x83\x64\x82\xc1\xb4\xc4\x04\x0c\x3e\x98\xdd\x52\x30\x4e\x87\x90\x16\x4c\x69\x34\x47\x37\x83\xb3\xa0\xff\x14\x6b\xf9\x8e\x50\x05\xa7\x94\xca\x8c\x53\x9e\x40\x7f\xc8\x4d\x1d\xbc\xa8\x14\x13\xc1\x99\x54\x63\x9d\x00\x95\xee\xa7\x3e\x8a\x0f\xa1\x7e\x3c\x7a\x4f\xf0\xc3\x11\x44\x1f\x0e\x1d\xfc\xaf\xe0\x37\x24\x54\x75\xec\x57\x12\x33\x6e\x20\xee\x84\x9d\xae\x5d\x6d\x6d\x25\x50\xde\xe5\xbb\xb2\xb4\x08\x5b\x85\xbb\x77\xd5\x10\x15\xa1\x41\x5d\x95\xb9\x62\x19\xee\xce\xbe\x55\x27\x97\x49\x1c\xc6\x9b\xef\xb1\xe5\xba\x03\x69\x30\x92\x6a\xcc\xcc\xbc\x76\x4e\x95\x92\x0a\xf2\x9a\x1c\xa7\x1c\x66\x7b\xc0\xe0\xb8\x14\xee\x54\xb7\xf5\xa2\xc0\xd6\x84\xcf\xd9\x3d\x16\xde\x6e\xfd\xe5\x88\xec\x47\xcd\x44\x14\x32\x9b\xe8\xba\xa3\xb6\xf5\x0e\xb8\xd7\x3e\x0e\xab\x90\x9b\x24\x27\x15\x95\x36\x75\x8a\x7a\x9f\x9a\x89\xdd\x17\xd6\xcf\xbf\x15\xaa\xa9\xf5\x7a\x7c\x7d\xe9\x94\x42\xa1\x96\x95\x4a\x51\x27\xb0\xfd\x71\xf2\x9c\xe3\x9a\x9b\xbe\xcf\x96\x53\x24\x4b\x63\xf1\x64\x09\x46\x71\xb4\x01\xf6\xc0\x17\xcd\x99\xac\x28\x83\x78\xc1\x01\xee\xb9\x29\xc0\x4c\x4b\x9b\x45\xe0\xe4\xe4\x69\x7e\x9a\x1d\x18\x14\xa8\x10\x74\x21\x2b\x91\x81\x24\x31\x85\x21\x42\xb4\x08\xf4\xad\xec\xad\x1f\xd7\x7e\xdf\x17\x57\xbb\x35\xa3\x42\xf2\x75\x5c\x0a\x36\x41\x18\x22\xd2\x72\x74\x6f\x6b\x75\x93\xb2\x64\x39\x92\x21\x99\x61\x7d\x96\xfb\xbe\x98\xff\x94\x19\xc2\x3d\xd3\x40\xd2\xb8\x7e\x98\x3a\x6a\x9c\x60\x7b\xa9\x14\x57\xa3\x1e\xf3\x5e\x72\xfb\x11\x72\xa1\x31\xfb\x0d\x0b\x51\xd8\xb0\x60\x59\x36\x59\xeb\x86\xbe\x08\x06\x76\x3c\xa2\xc0\xd4\x4e\x4c\xa9\xd2\x02\xb5\x71\x22\x09\x93\x5a\xc0\xe1\xdd\xb6\x7e\x67\x47\xab\x25\xaf\xab\xd2\x4e\x2e\xcc\x16\xc1\xbd\xda\xc0\xc6\xfa\x19\xc5\xfe\x08\xa4\x61\x02\x52\x59\x91\x01\x39\x82\x31\xb3\x62\x02\xb7\x97\xb6\xb7\x33\xc0\x87\x14\x31\x43\xfb\x50\xd6\x1c\x1d\xd2\xae\x2d\xc5\xf0\x7a\x13\xaf\x14\xba\x28\xf2\xc6\x72\x33\xd7\x72\x09\x7f\x3c\x5a\x79\x4c\xa4\xad\xf5\xc6\x73\x78\xc5\xd6\xef\x3b\xde\x4a\xb9\x66\x93\x59\xc5\x78\xc5\x18\x9d\xae\xa6\xee\x8a\x42\x39\x64\x5c\x61\x6a\xa4\x9a\xba\x63\x7e\x3a\x26\xd6\x80\xae\x1e\x53\x7b\xde\xa6\xab\xcd\xe2\x03\xa6\x95\xb3\x3b\x6f\x7c\xa7\xec\xb3\x61\x94\x3c\x69\xc0\xf5\x77\x6c\x5c\x94\xbd\xfe\xc6\x5b\xba\x07\xde\xf1\x8b\x9b\xdd\x03\xd6\x84\xbf\x90\x60\x6f\x15\xd6\xa6\x4b\xa6\xf4\xd2\x78\xf7\x65\xd4\x0b\x69\x54\xa0\x6e\xdc\xec\xec\xd9\x5d\xc2\x17\xaa\x17\xb2\x79\xf2\xfb\xde\x9a\x1a\x31\x2e\x30\xb3\xcd\xc3\x89\x1b\xce\x04\xff\xb6\xc8\xe4\x3c\xcb\xcf\xaf\x41\x1b\x6d\x6a\x4e\xcb\x5e\xdc\xb0\xf0\xc9\x7b\x7f\xe0\x34\x61\x82\x67\xcb\xad\x6d\xcb\x38\x95\x34\x7f\x33\x64\xe9\x1d\x8c\x94\x1c\x43\x35\x7f\x67\xb5\x79\x68\xff\x95\x2c\xd8\xff\x5f\x3b\xab\x2a\xab\x7b\xe0\xa5\xfe\x64\x3c\xcc\xc7\x42\x45\x1e\x35\x7b\x19\xb9\xca\x7d\x74\xe0\x3d\xe4\x45\xdb\xd7\x25\x04\x99\xc4\x5a\x14\xf1\x81\xeb\xa5\xd4\xbc\x08\x6c\x3c\xcc\xa8\xbf\xe7\xf3\x5c\x91\xc2\x54\xe6\xc4\xbf\x61\x06\xc7\x57\xe7\xb7\x4b\xa3\x71\xe1\x76\x35\xaa\x79\xb2\xf7\xbc\x8d\xd5\x6e\x35\x1a\xe4\x04\x17\x92\x65\xf6\x5f\x16\xe3\x84\xea\x0b\xaa\x09\x4f\xf1\x4c\xaa\x63\x7b\xe9\xb9\x92\x52\x7c\x26\x31\x3d\xa9\xe7\xd5\x33\x96\x6f\x6d\x77\xb5\x42\x75\xbd\xf9\x9c\xb2\xb1\x78\xf1\x14\x57\x82\xfe\x0b\x00\x00\xff\xff\x3e\xe0\x5c\xd4\x7c\x10\x00\x00")

func translationsEn_usLc_messagesAcsenginePoBytes() ([]byte, error) {
	return bindataRead(
		_translationsEn_usLc_messagesAcsenginePo,
		"translations/en_US/LC_MESSAGES/acsengine.po",
	)
}

func translationsEn_usLc_messagesAcsenginePo() (*asset, error) {
	bytes, err := translationsEn_usLc_messagesAcsenginePoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translations/en_US/LC_MESSAGES/acsengine.po", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _translationsEn_usLc_messagesAcsenginePoLcg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x51\x8f\xda\x46\x10\xc7\xdf\xf3\x29\xa6\x96\x50\x1e\xda\x62\xb8\xb6\xd7\xf6\x04\x44\xc8\x69\xa4\x53\x49\x72\x2a\xe4\x14\x29\xca\xc3\xb2\x3b\xe0\x6d\xd7\x3b\xee\xec\x98\x83\x7c\xfa\xca\x06\x1f\xd7\xaa\x55\xa5\xb2\xdb\xbc\x20\xb3\xf6\x7a\xff\xff\xdd\x99\xf9\x0d\x4c\x5e\xec\x2b\x07\x3b\xe4\x60\xc9\x4f\xb3\xf1\x70\x94\xbd\x98\x3d\x9b\x2c\x8a\xf7\xb0\xd4\x25\x56\xea\xbe\xbf\x75\x3d\x1c\x65\xf0\x46\x55\x38\xcd\x94\x0e\xe8\xb7\xd6\x63\x06\x77\x81\x6f\xcd\x34\x1b\x67\xb0\x64\x5d\x34\x6e\x9a\xa1\xff\xfa\xdd\x32\x83\x7d\xe5\x7c\x98\x66\xa5\x48\x7d\x93\xe7\xa1\x7b\x57\x18\x56\x56\x33\x05\xda\xc8\x50\x53\x95\x3b\xd2\x41\x1a\x63\x29\xbf\x1a\x8d\xae\xf3\xeb\xdc\xe9\x7d\x36\x7b\x06\x30\xb9\x15\xac\xa0\xfd\x58\x1d\x6a\x9c\x66\xa3\xac\xfb\x72\x5a\xe9\xbc\xe6\x02\xd5\x66\x9a\x09\x37\xd8\x4d\x03\x98\x2c\x85\xa1\x50\x32\xcd\x56\xb8\x97\xd3\x20\xc0\xe4\x5e\xb9\xd9\xe4\x8b\x0f\xc5\xcb\xf9\x6a\xfe\xe1\x27\x66\x62\xd8\xa2\x47\x56\x62\xfd\x16\x9a\x7a\xcb\xca\x20\x08\x56\xb5\x53\x82\x37\x30\x08\x1f\x3f\xce\x26\x79\x3b\xed\xf8\xde\x7c\x29\x7c\xba\x7c\x69\x43\x0d\xb7\xba\xdd\x93\xa5\x70\x06\x79\xa7\x38\x6f\x05\xfe\x8b\xf6\xab\x58\xda\x19\x95\x69\x85\x6f\xac\x43\x18\x84\xaf\xa0\x1b\x4e\x25\xfb\x9b\x58\xb2\x1f\xca\x56\xef\xef\x0d\xf2\xa1\x55\x3f\xff\xe5\x35\x6c\x3a\x37\x81\x1a\xd6\x18\x6e\x60\xf0\xe5\x2e\x85\x83\x6f\x2f\x77\xf0\x8a\x1a\x6f\xe0\xea\x2c\x16\x1e\xac\x94\x20\x87\xba\x3d\x01\xb0\x1e\xa4\x3c\x47\xd0\x10\x56\x25\x32\x42\x28\xa9\x71\x06\xc8\xbb\x03\xac\x11\xc6\x29\xcc\x7d\x17\xcb\x9c\xa7\xff\xe6\xae\x54\x3b\x84\x35\xa2\x4f\xe3\xef\xfa\x72\x7f\x6f\xc8\x20\x3c\xa8\x00\x9e\xa4\x4b\x9e\x43\xe7\xcf\x7a\x18\x24\x89\xb7\xef\x2f\x97\xbc\x2a\x11\x02\x3a\xd4\x82\x06\x88\x75\x89\x41\x58\x09\x71\x5f\xac\xe1\xf9\x20\x3c\x07\x7b\xf4\x14\x9a\xba\x26\x16\x34\x29\xdc\xfc\x10\xc1\x0d\x89\x72\xa0\xa9\xf1\x02\xb4\x81\x4a\x05\x41\x86\xfb\xd7\x6d\xca\x1b\xc0\xbd\x46\x34\xd8\x5e\xd4\x47\xc3\xdd\x93\xed\xbd\x14\x7e\x7e\xbc\xdc\xcf\xbb\x9e\x18\x04\x3f\x37\x6b\x64\x8f\x82\xe1\xf1\x64\xda\x8c\xf9\x1f\xce\x65\x3c\xba\xdc\x08\x76\x85\x59\x33\x1e\x49\x68\x2c\xa3\x16\xe2\x43\x17\x5d\xa9\x80\x32\x8e\x00\xf1\xa3\x70\xdc\xa3\x6e\x3a\xe5\x7d\x6d\xea\x88\x72\xe2\xe2\x4d\xa2\xf4\x1e\x47\x00\x39\x7e\xae\x26\x64\x1c\x01\xe7\x47\xf1\xb5\xe2\xf0\xa4\x0b\x49\xb6\xdb\x11\xe8\x8d\x7f\xd7\x36\x25\xdb\xe1\x08\x44\xde\x28\xeb\xd0\xb4\xf5\xc5\x7a\x2b\x56\x39\xfb\xe9\x1c\x1a\x7d\xd8\xa4\x6b\xf9\xc6\x11\xa0\x6b\xfd\x4e\x39\x6b\x9e\x56\xc5\x36\x37\x35\xf9\x7e\x64\xad\xf4\x6f\xb0\x61\xaa\xa0\xe9\xc7\x5a\xd8\xad\x7f\x45\x2d\x49\x5c\x45\xe0\xf2\x9f\x50\xdc\x23\xb8\xf1\x69\x0b\x7d\x04\x02\x9f\xeb\xe3\x31\xf8\xc1\x10\x1e\x19\x85\x7b\x1b\xd2\x6c\x77\x04\xd0\x36\x9e\x51\xd3\xd6\xdb\x4f\x68\x60\x7e\x77\x7b\xff\xa4\xf9\x49\xf2\x13\x2d\x02\x53\xff\x49\xb3\xf5\xb0\x20\x65\x0a\xf2\xa2\xac\x47\x5e\x22\xef\xac\xc6\x57\xc4\xf3\x2d\x7a\xb9\x23\x72\x6f\xbd\x3b\x14\xae\xe9\xba\xa3\x64\x16\x23\xd0\xf7\xa0\x2a\x17\x3d\x92\xde\x3e\x78\x34\x05\x55\x15\x7a\x09\xa7\x39\x45\x25\xa7\x3f\x1d\x16\x7a\x3f\x37\x95\xf5\x8f\xf3\xfe\xf2\xf8\x24\x5f\x14\xef\x67\x7f\x04\x00\x00\xff\xff\x86\x82\xb8\x03\xd0\x10\x00\x00")

func translationsEn_usLc_messagesAcsenginePoLcgBytes() ([]byte, error) {
	return bindataRead(
		_translationsEn_usLc_messagesAcsenginePoLcg,
		"translations/en_US/LC_MESSAGES/acsengine.po.lcg",
	)
}

func translationsEn_usLc_messagesAcsenginePoLcg() (*asset, error) {
	bytes, err := translationsEn_usLc_messagesAcsenginePoLcgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "translations/en_US/LC_MESSAGES/acsengine.po.lcg", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"translations/en_US/LC_MESSAGES/acsengine.mo":     translationsEn_usLc_messagesAcsengineMo,
	"translations/en_US/LC_MESSAGES/acsengine.po":     translationsEn_usLc_messagesAcsenginePo,
	"translations/en_US/LC_MESSAGES/acsengine.po.lcg": translationsEn_usLc_messagesAcsenginePoLcg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"translations": {nil, map[string]*bintree{
		"en_US": {nil, map[string]*bintree{
			"LC_MESSAGES": {nil, map[string]*bintree{
				"acsengine.mo":     {translationsEn_usLc_messagesAcsengineMo, map[string]*bintree{}},
				"acsengine.po":     {translationsEn_usLc_messagesAcsenginePo, map[string]*bintree{}},
				"acsengine.po.lcg": {translationsEn_usLc_messagesAcsenginePoLcg, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
